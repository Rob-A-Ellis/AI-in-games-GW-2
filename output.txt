Probs match target
# Model-based algorithms

## Policy iteration
Optimal policy is
Lake:
[['&' '.' '.' '.']
 ['.' '#' '.' '#']
 ['.' '.' '.' '#']
 ['#' '.' '.' '$']]
Policy:
[['↓' '→' '↓' '←']
 ['↓' '↑' '↓' '↑']
 ['→' '↓' '↓' '↑']
 ['↑' '→' '→' '↑']]
Value:
[[0.455 0.504 0.579 0.505]
 [0.508 0.    0.653 0.   ]
 [0.584 0.672 0.768 0.   ]
 [0.    0.771 0.887 1.   ]]

## Value iteration
Optimal value is
Lake:
[['&' '.' '.' '.']
 ['.' '#' '.' '#']
 ['.' '.' '.' '#']
 ['#' '.' '.' '$']]
Policy:
[['↓' '→' '↓' '←']
 ['↓' '↑' '↓' '↑']
 ['→' '↓' '↓' '↑']
 ['↑' '→' '→' '↑']]
Value:
[[0.455 0.504 0.579 0.505]
 [0.508 0.    0.653 0.   ]
 [0.584 0.672 0.768 0.   ]
 [0.    0.771 0.887 1.   ]]
 
## Sarsa
Lake:
[['&' '.' '.' '.']
 ['.' '#' '.' '#']
 ['.' '.' '.' '#']
 ['#' '.' '.' '$']]
Policy:
[['>' '>' '_' '<']
 ['_' '^' '_' '^']
 ['>' '_' '_' '^']
 ['^' '>' '>' '>']]
Value:
[[0.408 0.464 0.552 0.405]
 [0.365 0.    0.641 0.   ]
 [0.483 0.632 0.77  0.   ]
 [0.    0.757 0.882 1.   ]]

## Q-learning
Lake:
[['&' '.' '.' '.']
 ['.' '#' '.' '#']
 ['.' '.' '.' '#']
 ['#' '.' '.' '$']]
Policy:
[['_' '<' '<' '<']
 ['_' '^' '_' '^']
 ['>' '>' '_' '^']
 ['^' '>' '>' '_']]
Value:
[[0.459 0.385 0.316 0.196]
 [0.5   0.    0.664 0.   ]
 [0.588 0.671 0.751 0.   ]
 [0.    0.784 0.895 1.   ]]

## Linear Sarsa
Lake:
[['&' '.' '.' '.']
 ['.' '#' '.' '#']
 ['.' '.' '.' '#']
 ['#' '.' '.' '$']]
Policy:
[['_' '<' '_' '<']
 ['_' '^' '_' '^']
 ['>' '>' '_' '^']
 ['^' '>' '>' '>']]
Value:
[[0.409 0.311 0.386 0.216]
 [0.473 0.    0.62  0.   ]
 [0.566 0.666 0.777 0.   ]
 [0.    0.762 0.894 1.   ]]

## Linear Q-learning
Lake:
[['&' '.' '.' '.']
 ['.' '#' '.' '#']
 ['.' '.' '.' '#']
 ['#' '.' '.' '$']]
Policy:
[['_' '>' '_' '<']
 ['_' '^' '_' '^']
 ['>' '_' '_' '^']
 ['^' '>' '>' '>']]
Value:
[[0.459 0.442 0.55  0.497]
 [0.525 0.    0.639 0.   ]
 [0.606 0.682 0.776 0.   ]
 [0.    0.752 0.882 1.   ]]
